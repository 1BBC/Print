=head1 NAME

  Osbb managment module

=cut


use strict;
use warnings FATAL => 'all';

use Osbb::db::Osbb;
use Abills::Base qw/convert _bp/;
use JSON;

our(
  %lang,
  $html,
  $admin,
  $db,
  %permissions,
  %ADMIN_REPORT
);

my $Osbb = Osbb->new($db, $admin, \%conf);
#our %space_type = (
#  0  => '',
#  1  => $lang{COMMERCIAL}
#);

require Osbb::User_portal;
#require Osbb::Quick_reports;

if($permissions{3}) {
  require Osbb::Reports;
}

if($permissions{4}) {
  require Osbb::Configure;
}

if(%ADMIN_REPORT) {
  require Osbb::Periodic;
}


#**********************************************************
=head2 osbb_user($attr)

=cut
#**********************************************************
sub osbb_user {
  my($attr) = @_;

  if ( $FORM{add} ){
    $Osbb->user_add( { %FORM } );
    if ( !$Osbb->{errno} ){
      $html->message( 'info', $lang{BOXES}, "$lang{ADDED}" );
    }
  }
  elsif ( $FORM{change} ){
    $Osbb->user_change( \%FORM );
    if ( !_error_show( $Osbb ) ){
      $html->message( 'info', $lang{BOXES}, "$lang{CHANGED}" );
    }
  }
  elsif ( $FORM{del} && $FORM{COMMENTS} ){
    $Osbb->user_del( "$FORM{del}" );
    if ( !$Osbb->{errno} ){
      $html->message( 'info', $lang{BOXES}, "$lang{DELETED}" );
    }
  }

  _error_show($Osbb);

  if ( $FORM{UID} ){
    $Osbb->user_info({ UID =>  $FORM{UID} });

    if ( !$Osbb->{errno} ){
      $FORM{chg}=1;
      $Osbb->{APARTMENT_AREA} = sprintf("%.2f", $Osbb->{LIVING_SPACE} + $Osbb->{UTILITY_ROOM});
    }
  }

  $Osbb->{SEL_TYPE} = $html->form_select(
    'TYPE',
    {
      SELECTED => $Osbb->{TYPE},
      SEL_LIST => $Osbb->area_type_list({ COLS_NAME => 1, COLS_NAME => 1000 }),
      NO_ID    => 1,
      ID       => 'TYPE',
    }
  );

  $html->tpl_show(
    _include( 'osbb_user', 'Osbb' ),
    {
      %$Osbb,
      ACTION     => ($FORM{chg}) ? 'change' : 'add',
      LNG_ACTION => ($FORM{chg}) ? $lang{CHANGE} : $lang{REGISTRATION},
    }
  );

  return 1;
}

#**********************************************************
=head2 osbb_user_list($attr)

=cut
#**********************************************************
sub osbb_users_list {

  if ($FORM{search}){
    $html->message('warn', $lang{ERROR}, $lang{NOT_IMPLEMENTED});
  }
  elsif ($FORM{import}){
    return &_osbb_users_import;
  }
  
  result_former({
    INPUT_DATA      => $Osbb,
    FUNCTION        => 'user_list',
    BASE_FIELDS     => 0,
    DEFAULT_FIELDS  => 'FIO,DEPOSIT,ADDRESS_FLAT',
    FUNCTION_FIELDS => 'change,form_payments',
    MULTISELECT     => ($permissions{0}{7}) ? 'IDS:uid:internet_users_list' : '',
    EXT_TITLES      => {
      living_space   => $lang{LIVING_SPACE},
      utility_room   => $lang{UTILITY_ROOM},
      apartment_area => $lang{TOTAL_SPACE},
      commercial     => $lang{COMMERCIAL}
    },
    SELECT_VALUE    => {
      commercial    => {
        0 => '',
        1 => $lang{COMMERCIAL}
      }
    },
#    FILTER_COLS  => {
#      ip_num   => 'int2ip',
#    },
    TABLE           => {
      width      => '100%',
      caption    => "$lang{OSBB} - $lang{USERS}",
      qs         => $pages_qs,
      ID         => 'OSBB_USERS_LIST',
      #header     => $status_bar,
      SELECT_ALL => ($permissions{0}{7}) ? "internet_users_list:IDS:$lang{SELECT_ALL}" : undef,
      EXPORT     => 1,
      IMPORT     => "$SELF_URL?qindex=$index&import=1&header=2",
      MENU       =>
      "$lang{ADD}:index=" . get_function_index('dv_wizard_user') . ':add'
        . ";$lang{SEARCH}:index=$index&search_form=1:search"
    },
    MAKE_ROWS    => 1,
    SEARCH_FORMER=> 1,
    MODULE       => 'Osbb',
    TOTAL        => 1,
    #SHOW_MORE_THEN=>1,
    #OUTPUT2RETURN =>1
  });

  return 1;
}

#**********************************************************
=head2 _osbb_users_import()

=cut
#**********************************************************
sub _osbb_users_import {
  
  my %columns = (
    uid              => 'UID',
    fio              => $lang{FIO},
    phone            => $lang{PHONE},
    address_district => $lang{DISTRICT},
    address_street   => $lang{STREET},
    address_build    => $lang{BUILD},
    address_flat     => $lang{FLAT}
  );
  
  if ( !$FORM{FILE} ) {
    
    my $type_select = $html->form_select('FILE_FORMAT', {
        SEL_ARRAY   => [ 'CSV', 'JSON' ],
        NO_ARRAY_ID => 1
      });
    
    $html->tpl_show(_include('osbb_import_file_form', 'Osbb'),
      {
        FILE_FORMAT_SELECT => $type_select
      }
    );
    
    return 1;
  }
  elsif ( $FORM{preview} ) {
    
    $html->message('info alert-sm', $lang{TIP}, $lang{FILL_DEFAULT_VALUES_THAT_WILL_REPLACE_EMPTY_FILE_FIELDS});
    
    my ($file_columns, $rows) = osbb_parse_import_file($FORM{FILE_FORMAT}, $FORM{FILE});
    
    my $table = $html->table( {
      width       => '100%',
      caption     => "$lang{IMPORT} : $lang{PREVIEW}",
      border      => 1,
      title_plain => $file_columns,
      qs          => $pages_qs,
      ID          => 'OSBB_IMPORT_PREVIEW_TABLE'
    } );
    
    foreach my $imported_user ( @{$rows} ) {
      $table->addrow(@{$imported_user});
    }
    
    print $table->show();
  
    $html->tpl_show(_include('osbb_import_preview_form', 'Osbb'),
      {
        COLUMNS  => JSON::to_json(\%columns),
        TABLE_ID => $table->{ID} . '_',
        HEADINGS => JSON::to_json([ map { $columns{$_} || '' } @$file_columns ])
      }
    );
    
    return 1;
  }
  elsif ( $FORM{import} ) {
    
  }
  
}

#**********************************************************
=head2 osbb_parse_import_file($file_format, $upload_obj) - parses file

  Arguments:
    $file_format - CSV|JSON
    $upload_obj  - ref to $FORM{upload}
    
  Returns:
    list - ([@column_names], [ %users_rows ])

=cut
#**********************************************************
sub osbb_parse_import_file {
  my ($file_format, $upload_obj) = @_;
  
  return 0 unless ($file_format && $upload_obj && ref $upload_obj eq 'HASH');
  
  if ( $file_format eq 'CSV' ) {
    
    my $content = $upload_obj->{Contents};
    my $delimiter = ';';
    my @file_rows = split(/\r?\n/, $content);
  
    my @columns = split($delimiter, shift @file_rows);
    
    my @users_rows = ();
    foreach my $file_row ( @file_rows ) {
      next if (!$file_row || $file_row !~ /$delimiter/ );
      push @users_rows, [ split($delimiter, $file_row ) ];
    }
    
    return (\@columns, \@users_rows);
  }
  elsif ( $file_format eq 'JSON' ) {
    my $json_load_error = load_pmodule( "JSON", { RETURN => 1 } );
    if ( $json_load_error ) {
      print $json_load_error;
      return 0;
    }
    my $json = JSON->new()->utf8(0);
    
  }
  
  return [ ];
}

1
